networks:
  swarm_network:
    driver: overlay
    attachable: true

configs:
  env_config:
    external: true

volumes:
  db_data:
    driver: local
    name: testBoard_db_data

services:
  db:
    image: geonnim/postgres:17.2-alpine
    configs:
      - source: env_config
        target: /app/.env
    command:
      [
        '/bin/sh',
        '-c',
        'source /app/.env && exec docker-entrypoint.sh postgres',
      ]
    ports:
      - '5432:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro # init.sql 파일을 컨테이너에 마운트
    networks:
      - swarm_network
    healthcheck:
      test: ['CMD-SHELL', '[ "$DB_HOST" = "db" ] || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  pgadmin:
    image: dpage/pgadmin4:8.14
    configs:
      - source: env_config
        target: /app/.env
    command: ['/bin/sh', '-c', 'source /app/.env && exec /entrypoint.sh']
    environment:
      PGADMIN_LISTEN_PORT: '80'
    ports:
      - '5050:80'
    networks:
      - swarm_network
    healthcheck:
      test: ['CMD-SHELL', '[ "$DB_HOST" = "db" ] || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    image: geonnim/board:4.2
    configs:
      - source: env_config
        target: /app/.env
    command: ['/bin/sh', '-c', 'source /app/.env && exec npm start']
    ports:
      - '8000:8000'
    networks:
      - swarm_network
    healthcheck:
      test: ['CMD-SHELL', '[ "$DB_HOST" = "db" ] || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  python-server:
    image: geonnim/python-server:4.2
    configs:
      - source: env_config
        target: /app/.env
    command:
      [
        '/bin/sh',
        '-c',
        'source /app/.env && exec uvicorn app:app --host 0.0.0.0 --port 4000',
      ]
    ports:
      - '4000:4000'
    networks:
      - swarm_network
    healthcheck:
      test: ['CMD-SHELL', '[ "$DB_HOST" = "db" ] || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
