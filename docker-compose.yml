# services:
#   db:
#     build:
#       context: .
#       dockerfile: Dockerfile.postgres
#     image: postgres:17.2
#     container_name: postgresDb
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#       BOARD_USERNAME: ${BOARD_USERNAME}
#       BOARD_PASSWORD: ${BOARD_PASSWORD}
#       BOARD_DBNAME: ${POSTGRES_DB}
#     ports:
#       - '5432:5432'
#     volumes:
#       - db_data:/var/lib/postgresql/data
#       - ./init.sql.template:/docker-entrypoint-initdb.d/init.sql.template
#     command: >
#       /bin/bash -c
#       "apt-get update && apt-get install -y gettext-base &&
#       envsubst < /docker-entrypoint-initdb.d/init.sql.template > /docker-entrypoint-initdb.d/init.sql &&
#       docker-entrypoint.sh postgres"
#     healthcheck:
#       test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   pgadmin:
#     image: dpage/pgadmin4:latest
#     container_name: pgadmin4
#     environment:
#       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#     ports:
#       - '5050:80'
#     depends_on:
#       - db

#   backend:
#     build:
#       context: ./back
#       dockerfile: Dockerfile
#     image: geonnim/board:latest
#     container_name: boardBack
#     ports:
#       - '8000:8000'
#     environment:
#       DB_HOST: ${DB_HOST}
#       DB_PORT: ${DB_PORT}
#       DB_USER: ${BOARD_USERNAME}
#       DB_PASSWORD: ${BOARD_PASSWORD}
#       DB_NAME: ${POSTGRES_DB}
#     depends_on:
#       db:
#         condition: service_healthy

#   python-server:
#     build:
#       context: ./python-app
#       dockerfile: Dockerfile
#     image: geonnim/python-server:latest
#     container_name: python-server
#     ports:
#       - '4000:4000'

# volumes:
#   db_data:
#     name: my_board_project_db_data
#  아래는 도커 스웜 버전
# networks:
#   swarm_network:
#     driver: overlay
#     attachable: true

# services:
#   db:
#     image: postgres:17.2-alpine
#     configs:
#       - source: env_config
#         target: /app/.env
#     environment:
#       POSTGRES_USER: '${POSTGRES_USER}'
#       POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
#       POSTGRES_DB: '${POSTGRES_DB}'
#     ports:
#       - '5432:5432'
#     volumes:
#       - db_data:/var/lib/postgresql/data
#     networks:
#       - swarm_network
#     healthcheck:
#       test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
#       interval: 10s
#       timeout: 5s
#       retries: 3
#     entrypoint:
#       [
#         '/bin/bash',
#         '-c',
#         'source /app/.env && exec docker-entrypoint.sh postgres',
#       ]
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: none # 재시작 방지 (디버깅 시)

#   pgadmin:
#     image: dpage/pgadmin4:latest
#     configs:
#       - source: env_config
#         target: /app/.env
#     environment:
#       PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL}'
#       PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD}'
#     ports:
#       - '5050:80'
#     networks:
#       - swarm_network
#     healthcheck:
#       test: ['CMD-SHELL', 'wget -qO- http://localhost:80 || exit 1']
#       interval: 10s
#       timeout: 5s
#       retries: 3
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: none # 재시작 방지 (디버깅 시)

#   backend:
#     image: geonnim/board:1.0
#     configs:
#       - source: env_config
#         target: /app/.env
#     environment:
#       DB_HOST: 'db'
#       DB_PORT: '${DB_PORT}'
#       DB_USER: '${DB_USER}'
#       DB_PASSWORD: '${DB_PASSWORD}'
#       DB_NAME: '${DB_NAME}'
#     ports:
#       - '8000:8000'
#     networks:
#       - swarm_network
#     healthcheck:
#       test: ['CMD-SHELL', 'wget -qO- http://localhost:8000 || exit 1']
#       interval: 10s
#       timeout: 5s
#       retries: 3
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: on-failure

#   python-server:
#     image: geonnim/python-server:1.0
#     configs:
#       - source: env_config
#         target: /app/.env
#     environment:
#       DB_HOST: '${DB_HOST}'
#       DB_PORT: '${DB_PORT}'
#       DB_USER: '${DB_USER}'
#       DB_PASSWORD: '${DB_PASSWORD}'
#       DB_NAME: '${DB_NAME}'
#     ports:
#       - '4000:4000'
#     networks:
#       - swarm_network
#     healthcheck:
#       test: ['CMD-SHELL', 'wget -qO- http://localhost:4000 || exit 1']
#       interval: 10s
#       timeout: 5s
#       retries: 3
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: on-failure

# volumes:
#   db_data:
#     driver: local
#     name: board_db_data

# configs:
#   env_config:
#     external: true

#  gpt 버전
networks:
  swarm_network:
    driver: overlay
    attachable: true

configs:
  env_config:
    external: true

services:
  db:
    image: postgres:17.2-alpine
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'securepassword123'
      POSTGRES_DB: 'board'
    ports:
      - '5432:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - swarm_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: 'yy4338@gmail.com'
      PGADMIN_DEFAULT_PASSWORD: 'ehzjtlfgdj'
    ports:
      - '5050:80'
    networks:
      - swarm_network
    healthcheck:
      test:
        ['CMD-SHELL', 'wget --spider -S http://localhost:80/login || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  backend:
    image: geonnim/board:2.0
    environment:
      DB_HOST: 'db'
      DB_PORT: '5432'
      DB_USER: 'boardmaker'
      DB_PASSWORD: 'qwer1324'
      DB_NAME: 'board'
    ports:
      - '8000:8000'
    networks:
      - swarm_network
    configs:
      - source: env_config
        target: /app/.env
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:8000 || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  python-server:
    image: geonnim/python-server:2.0
    environment:
      DB_HOST: 'db'
      DB_PORT: '5432'
      DB_USER: 'boardmaker'
      DB_PASSWORD: 'qwer1324'
      DB_NAME: 'board'
    ports:
      - '4000:4000'
    networks:
      - swarm_network
    configs:
      - source: env_config
        target: /app/.env
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:4000 || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  db_data:
    driver: local
    name: board_db_data
# tts-stt 실패 버전 문제점 해결 방법 찾고 실행 요망
# python-tts-stt:
#   build:
#     context: ./python_tts_stt
#     dockerfile: Dockerfile
#   image: geonnim/python-tts-stt:latest
#   container_name: python-tts-stt
#   environment:
#     PYTHONPATH: '/python_tts_stt'
#     OPENAI_API_KEY: ${OPENAI_API_KEY}
#     DATABASE_URL: 'postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}'
#   ports:
#     - '4001:4001'
#   volumes:
#     - ./python_tts_stt/temp:/app/temp
#     - ./vosk-model-small-ko-0.22:/app/vosk-model
#   depends_on:
#     db:
#       condition: service_healthy

# 아래는 네트워크를 분리해서 사용함

# services:
#   db:
#     build:
#       context: .
#       dockerfile: Dockerfile.postgres
#     image: postgres:17.2
#     container_name: postgresDb
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#       BOARD_USERNAME: ${BOARD_USERNAME}
#       BOARD_PASSWORD: ${BOARD_PASSWORD}
#       BOARD_DBNAME: ${POSTGRES_DB}
#     ports:
#       - '5432:5432'
#     volumes:
#       - db_data:/var/lib/postgresql/data
#       - ./init.sql.template:/docker-entrypoint-initdb.d/init.sql.template
#     command: >
#       /bin/bash -c
#       "apt-get update && apt-get install -y gettext-base &&
#       envsubst < /docker-entrypoint-initdb.d/init.sql.template > /docker-entrypoint-initdb.d/init.sql &&
#       docker-entrypoint.sh postgres"
#     healthcheck:
#       test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     networks:
#       - db-network

#   pgadmin:
#     image: dpage/pgadmin4:latest
#     container_name: pgadmin4
#     environment:
#       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#     ports:
#       - '5050:80'
#     depends_on:
#       - db
#     networks:
#       - db-network

#   backend:
#     build:
#       context: ../
#       dockerfile: Dockerfile
#     image: geonnim/board:latest
#     container_name: boardBack
#     ports:
#       - '8000:8000'
#     environment:
#       DB_HOST: postgresDb
#       DB_PORT: 5432
#       DB_USER: ${BOARD_USERNAME}
#       DB_PASSWORD: ${BOARD_PASSWORD}
#       DB_NAME: ${POSTGRES_DB}
#     depends_on:
#       db:
#         condition: service_healthy
#     networks:
#       - backend-network
#       - db-network

# volumes:
#   db_data:
#     name: my_board_project_db_data

# networks:
#   db-network:
#     driver: bridge
#   backend-network:
#     driver: bridge
