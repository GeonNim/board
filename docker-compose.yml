services:
  db:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    image: postgres:17.2
    container_name: postgresDb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      BOARD_USERNAME: ${BOARD_USERNAME}
      BOARD_PASSWORD: ${BOARD_PASSWORD}
      BOARD_DBNAME: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql.template:/docker-entrypoint-initdb.d/init.sql.template
    command: >
      /bin/bash -c
      "apt-get update && apt-get install -y gettext-base &&
      envsubst < /docker-entrypoint-initdb.d/init.sql.template > /docker-entrypoint-initdb.d/init.sql &&
      docker-entrypoint.sh postgres"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - '5050:80'
    depends_on:
      - db

  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    image: geonnim/board:latest
    container_name: boardBack
    ports:
      - '8000:8000'
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${BOARD_USERNAME}
      DB_PASSWORD: ${BOARD_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
      python-server:
        condition: service_healthy

  python-server:
    build:
      context: ./python-app
      dockerfile: Dockerfile
    image: python-server:latest
    container_name: python-server
    ports:
      - '4000:4000'

volumes:
  db_data:
    name: my_board_project_db_data
# 아래는 네트워크를 분리해서 사용함
# services:
#   db:
#     build:
#       context: .
#       dockerfile: Dockerfile.postgres
#     image: postgres:17.2
#     container_name: postgresDb
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#       BOARD_USERNAME: ${BOARD_USERNAME}
#       BOARD_PASSWORD: ${BOARD_PASSWORD}
#       BOARD_DBNAME: ${POSTGRES_DB}
#     ports:
#       - '5432:5432'
#     volumes:
#       - db_data:/var/lib/postgresql/data
#       - ./init.sql.template:/docker-entrypoint-initdb.d/init.sql.template
#     command: >
#       /bin/bash -c
#       "apt-get update && apt-get install -y gettext-base &&
#       envsubst < /docker-entrypoint-initdb.d/init.sql.template > /docker-entrypoint-initdb.d/init.sql &&
#       docker-entrypoint.sh postgres"
#     healthcheck:
#       test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     networks:
#       - db-network

#   pgadmin:
#     image: dpage/pgadmin4:latest
#     container_name: pgadmin4
#     environment:
#       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#     ports:
#       - '5050:80'
#     depends_on:
#       - db
#     networks:
#       - db-network

#   backend:
#     build:
#       context: ../
#       dockerfile: Dockerfile
#     image: geonnim/board:latest
#     container_name: boardBack
#     ports:
#       - '8000:8000'
#     environment:
#       DB_HOST: postgresDb
#       DB_PORT: 5432
#       DB_USER: ${BOARD_USERNAME}
#       DB_PASSWORD: ${BOARD_PASSWORD}
#       DB_NAME: ${POSTGRES_DB}
#     depends_on:
#       db:
#         condition: service_healthy
#     networks:
#       - backend-network
#       - db-network

# volumes:
#   db_data:
#     name: my_board_project_db_data

# networks:
#   db-network:
#     driver: bridge
#   backend-network:
#     driver: bridge
